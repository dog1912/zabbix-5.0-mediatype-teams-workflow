<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2024-08-28T15:55:45Z</date>
    <media_types>
        <media_type>
            <name>Zabbix Workflow</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_date</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_opdata</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_date</name>
                    <value>{EVENT.RECOVERY.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_time</name>
                    <value>{EVENT.RECOVERY.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_source</name>
                    <value>{EVENT.SOURCE}</value>
                </parameter>
                <parameter>
                    <name>event_status</name>
                    <value>{EVENT.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_tags</name>
                    <value>{EVENT.TAGS}</value>
                </parameter>
                <parameter>
                    <name>event_time</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_update_action</name>
                    <value>{EVENT.UPDATE.ACTION}</value>
                </parameter>
                <parameter>
                    <name>event_update_date</name>
                    <value>{EVENT.UPDATE.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_update_time</name>
                    <value>{EVENT.UPDATE.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_update_user</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>host_ip</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>host_name</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>teams_endpoint</name>
                    <value><FLOW HOOK GOES HERE></value>
                </parameter>
                <parameter>
                    <name>trigger_description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>use_default_message</name>
                    <value>false</value>
                </parameter>
                <parameter>
                    <name>zabbix_url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
            </parameters>
            <script>var SEVERITY_COLORS = [&#13;
            'emphasis', // Not classified.&#13;
            'accent', // Information.&#13;
            'warning', // Warning.&#13;
            'warning', // Average.&#13;
            'attention', // High.&#13;
            'attention', // Disaster.&#13;
            'good', // Resolved.&#13;
            'default'  // Default.&#13;
        ];&#13;
        &#13;
        try {&#13;
            var params = JSON.parse(value);&#13;
        &#13;
            if (typeof params.teams_endpoint !== 'string' || params.teams_endpoint.trim() === '') {&#13;
                throw 'Cannot get teams_endpoint';&#13;
            }&#13;
            else if (!params.teams_endpoint.startsWith('https')) {&#13;
                throw 'Invalid MS Teams webhook URL: ' + params.teams_endpoint;&#13;
            }&#13;
        &#13;
            params.zabbix_url = (params.zabbix_url.endsWith('/'))&#13;
                ? params.zabbix_url.slice(0, -1) : params.zabbix_url;&#13;
        &#13;
            if ([0, 1, 2, 3, 4].indexOf(parseInt(params.event_source)) === -1) {&#13;
                throw 'Incorrect &quot;event_source&quot; parameter given: &quot;' + params.event_source + '&quot;.\nMust be 0-4.';&#13;
            }&#13;
        &#13;
            // Set &quot;use_default_message&quot; to true for non trigger-based events.&#13;
            if (params.event_source !== '0') {&#13;
                params.use_default_message = 'true';&#13;
            }&#13;
        &#13;
            // Check {EVENT.VALUE} for trigger-based and internal events.&#13;
            if (params.event_value !== '0' &amp;&amp; params.event_value !== '1'&#13;
                    &amp;&amp; (params.event_source === '0' || params.event_source === '3')) {&#13;
                throw 'Incorrect &quot;event_value&quot; parameter given: &quot;' + params.event_value + '&quot;.\nMust be 0 or 1.';&#13;
            }&#13;
        &#13;
            // Check {EVENT.UPDATE.STATUS} only for trigger-based events.&#13;
            if (params.event_update_status !== '0' &amp;&amp; params.event_update_status !== '1' &amp;&amp; params.event_source === '0') {&#13;
                throw 'Incorrect &quot;event_update_status&quot; parameter given: &quot;' + params.event_update_status + '&quot;.\nMust be 0 or 1.';&#13;
            }&#13;
        &#13;
            if (params.event_value == 0) {&#13;
                params.event_nseverity = '6';&#13;
            }&#13;
        &#13;
            if (!SEVERITY_COLORS[params.event_nseverity]) {&#13;
                params.event_nseverity = '7';&#13;
            }&#13;
        &#13;
            var request = new CurlHttpRequest(),&#13;
                factset = {&#13;
                    type: 'FactSet',&#13;
                    facts: []&#13;
                }&#13;
                adaptivecard = {&#13;
                    '$schema': 'http://adaptivecards.io/schemas/adaptive-card.json',&#13;
                    type: 'AdaptiveCard',&#13;
                    version: '1.4',&#13;
                    body: [&#13;
                        {&#13;
                            type: 'Container',&#13;
                            items: [&#13;
                                {&#13;
                                    type: 'TextBlock',&#13;
                                    style: &quot;heading&quot;,&#13;
                                    wrap: true,&#13;
                                    size: 'Medium',&#13;
                                    weight: 'Bolder',&#13;
                                    text: params.alert_subject&#13;
                                }&#13;
                            ],&#13;
                            style: SEVERITY_COLORS[params.event_nseverity],&#13;
                            bleed: true&#13;
                        },&#13;
                        {&#13;
                            type: 'RichTextBlock',&#13;
                            inlines: [&#13;
                                (params.use_default_message.toLowerCase() == 'true')&#13;
                                ? params.alert_message&#13;
                                : params.trigger_description,&#13;
                            ]&#13;
                        }&#13;
                    ],&#13;
                    actions: [&#13;
                        {&#13;
                            type: 'Action.OpenUrl',&#13;
                            title: (params.event_source === '0')&#13;
                                ? 'Event Info'&#13;
                                : 'Zabbix Home',&#13;
                            url: (params.event_source === '0')&#13;
                                ? params.zabbix_url + '/tr_events.php?triggerid=' +&#13;
                                    params.trigger_id + '&amp;eventid=' + params.event_id&#13;
                                : params.zabbix_url&#13;
                        }&#13;
                    ]&#13;
                }&#13;
                body = {&#13;
                    type: 'message',&#13;
                    attachments: [&#13;
                        {&#13;
                            contentType: 'application/vnd.microsoft.card.adaptive',&#13;
                            contentUrl: null,&#13;
                        }&#13;
                    ]&#13;
                };&#13;
        &#13;
            if (params.use_default_message.toLowerCase() !== 'true') {&#13;
                // Problem message.&#13;
                if (params.event_value === '1' &amp;&amp; params.event_update_status === '0') {&#13;
                    factset.facts.push({&#13;
                        title: 'Event time',&#13;
                        value: params.event_time + ' ' + params.event_date&#13;
                    });&#13;
                    factset.facts.push({&#13;
                        title: 'Host',&#13;
                        value: params.host_name + ' [' + params.host_ip + ']'&#13;
                    });&#13;
        &#13;
                }&#13;
                // Update message.&#13;
                else if (params.event_update_status === '1') {&#13;
                    adaptivecard.body[1].text = params.event_update_user + ' ' + params.event_update_action + '.';&#13;
        &#13;
                    if (params.event_update_message) {&#13;
                        adaptivecard.body[1].text += '&lt;br&gt;Message:&lt;br&gt;' + params.event_update_message;&#13;
                    }&#13;
        &#13;
                    factset.facts.push({&#13;
                        title: 'Event update time',&#13;
                        value: params.event_update_time + ' ' + params.event_update_date&#13;
                    });&#13;
                    factset.facts.push({&#13;
                        title: 'Host',&#13;
                        value: params.host_name + ' [' + params.host_ip + ']'&#13;
                    });&#13;
        &#13;
                }&#13;
                // Resolved message.&#13;
                else {&#13;
                    factset.facts.push({&#13;
                        title: 'Recovery time',&#13;
                        value: params.event_recovery_time + ' ' + params.event_recovery_date&#13;
                    });&#13;
                    factset.facts.push({&#13;
                        title: 'Host',&#13;
                        value: params.host_name + ' [' + params.host_ip + ']'&#13;
                    });&#13;
                }&#13;
        &#13;
                if (params.event_severity &amp;&amp; params.event_severity !== '{EVENT.SEVERITY}') {&#13;
                    factset.facts.push({&#13;
                        title: 'Severity',&#13;
                        value: params.event_severity&#13;
                    });&#13;
                }&#13;
        &#13;
        &#13;
                if (params.event_opdata &amp;&amp; params.event_opdata !== '{EVENT.OPDATA}') {&#13;
                    factset.facts.push({&#13;
                        title: 'Operational data',&#13;
                        value: params.event_opdata&#13;
                    });&#13;
                }&#13;
        &#13;
                if (params.event_tags &amp;&amp; params.event_tags !== '{EVENT.TAGS}') {&#13;
                    factset.facts.push({&#13;
                        title: 'Event tags',&#13;
                        value: params.event_tags&#13;
                    });&#13;
                }&#13;
        &#13;
                Object.keys(params)&#13;
                    .forEach(function (key) {&#13;
                        if (key.startsWith('fact_') &amp;&amp; params[key] !== '') {&#13;
                            factset.facts.push({&#13;
                                title: key.substring(5),&#13;
                                value: params[key]&#13;
                            });&#13;
                        }&#13;
                        else if (key.startsWith('openUri_') &amp;&amp; params[key] !== '' &amp;&amp; !params[key].startsWith('{')) {&#13;
                            adaptivecard.actions.push({&#13;
                                type: 'Action.OpenUrl',&#13;
                                title: key.substring(8),&#13;
                                url: params[key]&#13;
                            });&#13;
                        }&#13;
                    });&#13;
                adaptivecard.body.push(factset);&#13;
            }&#13;
        &#13;
            body.attachments[0].content = adaptivecard;&#13;
        &#13;
            request.AddHeader('Content-Type: application/json');&#13;
        &#13;
            if (typeof params.HTTPProxy === 'string' &amp;&amp; params.HTTPProxy !== '') {&#13;
                request.setProxy(params.HTTPProxy);&#13;
            }&#13;
        &#13;
            Zabbix.Log(4, '[ MS Teams Webhook ] JSON: ' + JSON.stringify(body));&#13;
        &#13;
            var response = request.Post(params.teams_endpoint, JSON.stringify(body));&#13;
        &#13;
            Zabbix.Log(4, '[ MS Teams Webhook ] Response: ' + response);&#13;
        &#13;
            var responsecode = request.Status();&#13;
            if (responsecode  ===  202) {&#13;
                return 'OK';&#13;
            }&#13;
            else {&#13;
                Zabbix.Log(4, '[ MS Teams Webhook ] FAILED with response code: ' + responsecode);&#13;
                throw 'Response code: ' + responsecode;&#13;
            }&#13;
        }&#13;
        catch (error) {&#13;
            Zabbix.Log(4, '[ MS Teams Webhook ] ERROR: ' + error);&#13;
            throw 'Sending failed: ' + error;&#13;
        }</script>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Problem: {EVENT.NAME}</subject>
                    <message>Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Operational data: {EVENT.OPDATA}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>Resolved: {EVENT.NAME}</subject>
                    <message>Problem has been resolved in {EVENT.DURATION} at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Problem name: {EVENT.NAME}&#13;
Host: {HOST.NAME}&#13;
Severity: {EVENT.SEVERITY}&#13;
Original problem ID: {EVENT.ID}&#13;
{TRIGGER.URL}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>Updated problem: {EVENT.NAME}</subject>
                    <message>{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
{EVENT.UPDATE.MESSAGE}&#13;
&#13;
Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
